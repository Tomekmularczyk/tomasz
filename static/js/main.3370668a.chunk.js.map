{"version":3,"sources":["types.ts","theme.ts","DataSource.tsx","useDeviceType.ts","useIsTabletAndAbove.tsx","Orderbook/OrdersList.tsx","Orderbook/Asks.tsx","Orderbook/Bids.tsx","Orderbook/Footer.tsx","Orderbook/Spread.tsx","Orderbook/Header.tsx","Orderbook/usePriceLevelsList.tsx","Orderbook/Orderbook.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProductId","Breakpoints","DataSource","productId","setInitialSnapshot","setDeltaMessages","onError","deviceSpeed","useHardwareConcurrency","numberOfLogicalProcessors","useMemoryStatus","deviceMemory","useDeviceSpeed","useWebSocket","sendJsonMessage","lastJsonMessage","readyState","deltasRef","useRef","prevProductId","usePrevious","lastMessage","useEffect","ReadyState","OPEN","event","feed","product_ids","current","message","asks","bids","isDeltaMessage","product_id","push","interval","slow","medium","fast","useInterval","useIsTabletAndAbove","useMedia","Tablet","Level","styled","div","ColumnTitlesWrapper","ColumnTitle","p","DataRow","shouldReverseColumns","DataCell","span","List","ol","Price","variant","numberFormatter","Intl","NumberFormat","priceFormatter","minimumFractionDigits","getLevelDepthBackground","depth","total","highestTotal","graphDirection","depthGraphAlign","colorVariant","OrdersList","priceLevels","shouldDisplayColumnTitles","map","price","size","style","background","data-testid","format","Asks","memo","isTabletAndAbove","reverse","Bids","ToggleFeedButton","button","Container","Footer","onToggleFeedClick","type","onClick","SpreadText","spreadFormatter","maximumFractionDigits","percentageFormatter","Spread","spreadPoints","spreadPercentage","TopHeader","StatusText","RestartButton","Header","feedStatus","onRestartFeedClick","getPriceLevelsList","direction","listLength","Object","entries","sort","a","b","valueOfA","Number","valueOfB","slice","calculateTotals","priceList","createPriceLevelsMap","reduce","acc","next","updatePriceLevel","currentState","stateCopy","forEach","OrdersContainer","OrdersListWrapper","Orderbook","initialSnapshot","deltas","useState","setAsks","setBids","bidsWithTotals","useMemo","asksWithTotals","updatePriceLevels","useCallback","delta","state","usePriceLevelsList","topBid","topAsk","bottomBid","length","bottomAsk","MainContainer","main","App","networkState","useNetworkState","setFeedStatus","PI_XBTUSD","setProductId","setDeltas","useEvent","handleToggleFeed","PI_ETHUSD","handleRestartFeed","handleFeedError","online","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3370668a.chunk.js","sourcesContent":["export enum ProductId {\n  PI_XBTUSD = \"PI_XBTUSD\",\n  PI_ETHUSD = \"PI_ETHUSD\",\n}\n\ninterface InfoMessage {\n  event: \"info\";\n  version: number;\n}\n\ninterface SubscribedMessage {\n  event: \"subscribed\";\n  feed: string;\n  product_ids: string[];\n}\n\nexport type PriceLevel = [number, number]; // price, size\n\nexport interface InitialSnapshotMessage {\n  numLevels: number;\n  product_id: string;\n  feed: \"book_ui_1_snapshot\";\n  bids: PriceLevel[];\n  asks: PriceLevel[];\n}\n\nexport interface DeltaMessage {\n  product_id: ProductId;\n  feed: \"book_ui_1\";\n  bids?: PriceLevel[];\n  asks?: PriceLevel[];\n}\n\nexport type SocketMessage =\n  | InfoMessage\n  | SubscribedMessage\n  | InitialSnapshotMessage\n  | DeltaMessage;\n\nexport const isInitialSnaphotMessage = (\n  message: SocketMessage\n): message is InitialSnapshotMessage => {\n  return (message as InitialSnapshotMessage).feed === \"book_ui_1_snapshot\";\n};\n\nexport const isDeltaMessage = (\n  message: SocketMessage\n): message is DeltaMessage => {\n  return !!(message as DeltaMessage).asks || !!(message as DeltaMessage).bids;\n};\n\nexport type FeedStatus = \"feeding\" | \"stopped\" | \"error\";\n\nexport interface PriceLevelData {\n  price: number;\n  size: number;\n  total: number;\n}\n","export enum Breakpoints {\n  Tablet = 768,\n}\n","import { useEffect, useRef } from \"react\";\nimport { useInterval, usePrevious } from \"react-use\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport {\n  DeltaMessage,\n  InitialSnapshotMessage,\n  isDeltaMessage,\n  isInitialSnaphotMessage,\n  ProductId,\n  SocketMessage,\n} from \"./types\";\nimport { useDeviceSpeed } from \"./useDeviceType\";\n\ninterface Props {\n  productId: ProductId;\n  setInitialSnapshot: (snapshot: InitialSnapshotMessage) => void;\n  setDeltaMessages: (delta: DeltaMessage[]) => void;\n  onError: () => void;\n}\n\n/**\n * Component that handles data fetching.\n *\n * This could be a hook, however there is no way to stop websocket using react-use-websocket\n * other than unmount the hook.\n */\nexport const DataSource = ({\n  productId,\n  setInitialSnapshot,\n  setDeltaMessages,\n  onError,\n}: Props) => {\n  const deviceSpeed = useDeviceSpeed();\n  const { sendJsonMessage, lastJsonMessage, readyState } = useWebSocket(\n    \"wss://www.cryptofacilities.com/ws/v1\",\n    {\n      onError,\n    }\n  );\n  const deltasRef = useRef<DeltaMessage[]>([]);\n  const prevProductId = usePrevious(productId);\n  const lastMessage: SocketMessage | undefined = lastJsonMessage;\n\n  // subscribe/unsubscribe to data feed\n  useEffect(() => {\n    if (readyState === ReadyState.OPEN) {\n      sendJsonMessage({\n        event: \"unsubscribe\",\n        feed: \"book_ui_1\",\n        product_ids: [prevProductId],\n      });\n      deltasRef.current = []; // cleanup old messages\n      sendJsonMessage({\n        event: \"subscribe\",\n        feed: \"book_ui_1\",\n        product_ids: [productId],\n      });\n    }\n  }, [readyState, sendJsonMessage, productId, prevProductId]);\n\n  // handle streaming data\n  useEffect(() => {\n    if (!lastMessage) {\n      return;\n    }\n    if (isInitialSnaphotMessage(lastMessage)) {\n      setInitialSnapshot(lastMessage);\n    } else if (\n      isDeltaMessage(lastMessage) &&\n      lastMessage.product_id === productId // ignore messages from previous feed\n    ) {\n      deltasRef.current.push(lastMessage);\n    }\n  }, [lastMessage, setInitialSnapshot, productId]);\n\n  // batch updates to prevent too frequent re-renders\n  const interval = {\n    slow: 3_000,\n    medium: 1_500,\n    fast: 750,\n  }[deviceSpeed];\n  useInterval(() => {\n    setDeltaMessages(deltasRef.current);\n    deltasRef.current = [];\n  }, interval);\n\n  return null;\n};\n","import { useHardwareConcurrency } from \"react-adaptive-hooks/hardware-concurrency\";\nimport { useMemoryStatus } from \"react-adaptive-hooks/memory\";\n\ntype DeviceType = \"slow\" | \"medium\" | \"fast\";\n\n/**\n * Hook that determines user device perfomance possibility.\n * (Calculations are strictly opinionated, without any research)\n * @returns DeviceType\n */\nexport const useDeviceSpeed = (): DeviceType => {\n  const { numberOfLogicalProcessors = 2 } = useHardwareConcurrency();\n  const { deviceMemory = 4 } = useMemoryStatus();\n\n  if (numberOfLogicalProcessors > 2 && deviceMemory > 4) {\n    return \"fast\";\n  }\n  if (numberOfLogicalProcessors > 1 && deviceMemory <= 4 && deviceMemory >= 2) {\n    return \"medium\";\n  }\n  return \"slow\";\n};\n","import { useMedia } from \"react-use\";\nimport { Breakpoints } from \"./theme\";\n\nexport const useIsTabletAndAbove = () =>\n  useMedia(`(min-width: ${Breakpoints.Tablet}px)`);\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { PriceLevelData } from \"../types\";\n\ntype ColorVariant = \"green\" | \"red\";\ntype DepthGraphAlign = \"left\" | \"right\";\n\nconst Level = styled.div`\n  padding-left: 10%;\n  padding-right: 5%;\n  padding: 4px 5% 4px 10%;\n`;\n\nconst ColumnTitlesWrapper = styled.div`\n  border-bottom: 1px solid gray;\n`;\n\nconst ColumnTitle = styled.p`\n  text-transform: uppercase;\n  color: gray;\n`;\n\nconst DataRow = styled.div<{ shouldReverseColumns?: boolean }>`\n  display: flex;\n  flex-flow: ${({ shouldReverseColumns = false }) =>\n    shouldReverseColumns ? \"row-reverse\" : \"row\"};\n`;\n\nconst DataCell = styled.span`\n  color: white;\n  width: 33.33%;\n  text-align: right;\n`;\n\nconst List = styled.ol`\n  list-style: none;\n`;\n\nconst Price = styled.span<{ variant: ColorVariant }>`\n  color: ${({ variant }) => (variant === \"green\" ? \"green\" : \"red\")};\n`;\n\nconst numberFormatter = new Intl.NumberFormat(\"en-IN\");\n\nconst priceFormatter = new Intl.NumberFormat(\"en-IN\", {\n  minimumFractionDigits: 2,\n});\n\nconst getLevelDepthBackground = ({\n  total,\n  highestTotal,\n  depthGraphAlign,\n  colorVariant,\n}: {\n  total: number;\n  highestTotal: number;\n  depthGraphAlign: DepthGraphAlign;\n  colorVariant: ColorVariant;\n}): string | undefined => {\n  const depthPercentage = (total / highestTotal) * 100;\n  const depth = 100 - depthPercentage;\n  const graphDirection = depthGraphAlign === \"left\" ? \"270deg\" : \"90deg\";\n  switch (colorVariant) {\n    case \"green\":\n      return `\n        linear-gradient(\n          ${graphDirection},\n          transparent ${depth}%,\n          #00ff0035 ${depth}%,\n          #00FF0035 100%\n        )\n      `;\n    case \"red\":\n      return `\n        linear-gradient(\n          ${graphDirection},\n          transparent ${depth}%,\n          #ff000035 ${depth}%,\n          #ff000035 100%\n        )\n      `;\n    default:\n      return;\n  }\n};\n\ninterface Props {\n  priceLevels: PriceLevelData[];\n  highestTotal: number;\n  colorVariant: ColorVariant;\n  depthGraphAlign: DepthGraphAlign;\n  shouldReverseColumns?: boolean;\n  shouldDisplayColumnTitles?: boolean;\n  shouldReversePriceLevels?: boolean;\n}\n\nexport const OrdersList = ({\n  priceLevels,\n  highestTotal,\n  colorVariant,\n  depthGraphAlign,\n  shouldDisplayColumnTitles = false,\n  shouldReverseColumns = false,\n}: Props) => {\n  return (\n    <>\n      {shouldDisplayColumnTitles ? (\n        <ColumnTitlesWrapper>\n          <Level>\n            <DataRow shouldReverseColumns={shouldReverseColumns}>\n              <DataCell>\n                <ColumnTitle>Total</ColumnTitle>\n              </DataCell>\n              <DataCell>\n                <ColumnTitle>Size</ColumnTitle>\n              </DataCell>\n              <DataCell>\n                <ColumnTitle>Price</ColumnTitle>\n              </DataCell>\n            </DataRow>\n          </Level>\n        </ColumnTitlesWrapper>\n      ) : null}\n      <List>\n        {priceLevels.map(({ price, size, total }) => (\n          <li key={price}>\n            <Level\n              style={{\n                background: getLevelDepthBackground({\n                  total,\n                  highestTotal,\n                  depthGraphAlign,\n                  colorVariant,\n                }),\n              }}\n            >\n              <DataRow shouldReverseColumns={shouldReverseColumns}>\n                <DataCell data-testid=\"total\">\n                  {numberFormatter.format(total)}\n                </DataCell>\n                <DataCell data-testid=\"size\">\n                  {numberFormatter.format(size)}\n                </DataCell>\n                <DataCell data-testid=\"price\">\n                  <Price variant={colorVariant}>\n                    {priceFormatter.format(price)}\n                  </Price>\n                </DataCell>\n              </DataRow>\n            </Level>\n          </li>\n        ))}\n      </List>\n    </>\n  );\n};\n","import React, { memo } from \"react\";\nimport { PriceLevelData } from \"../types\";\nimport { useIsTabletAndAbove } from \"../useIsTabletAndAbove\";\nimport { OrdersList } from \"./OrdersList\";\n\ninterface Props {\n  asks: PriceLevelData[];\n  highestTotal: number;\n}\n\nexport const Asks = memo(({ asks, highestTotal }: Props) => {\n  const isTabletAndAbove = useIsTabletAndAbove();\n\n  return (\n    <OrdersList\n      colorVariant=\"red\"\n      depthGraphAlign=\"left\"\n      priceLevels={isTabletAndAbove ? asks : [...asks].reverse()}\n      highestTotal={highestTotal}\n      shouldDisplayColumnTitles\n      shouldReverseColumns\n    />\n  );\n});\n","import React, { memo } from \"react\";\nimport { PriceLevelData } from \"../types\";\nimport { useIsTabletAndAbove } from \"../useIsTabletAndAbove\";\nimport { OrdersList } from \"./OrdersList\";\n\ninterface Props {\n  bids: PriceLevelData[];\n  highestTotal: number;\n}\n\nexport const Bids = memo(({ bids, highestTotal }: Props) => {\n  const isTabletAndAbove = useIsTabletAndAbove();\n\n  return (\n    <OrdersList\n      colorVariant=\"green\"\n      depthGraphAlign={isTabletAndAbove ? \"right\" : \"left\"}\n      priceLevels={bids}\n      highestTotal={highestTotal}\n      shouldDisplayColumnTitles={isTabletAndAbove}\n      shouldReverseColumns={!isTabletAndAbove}\n    />\n  );\n});\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst ToggleFeedButton = styled.button`\n  background-color: purple;\n  cursor: pointer;\n  border: none;\n  margin: 8px auto;\n  color: white;\n  border-radius: 2px;\n  padding: 4px 8px;\n  letter-spacing: 2px;\n  &:active {\n    opacity: 0.9;\n  }\n`;\n\nconst Container = styled.div`\n  text-align: center;\n`;\n\ninterface Props {\n  onToggleFeedClick: () => void;\n}\n\nexport const Footer = ({ onToggleFeedClick }: Props) => {\n  return (\n    <Container>\n      <ToggleFeedButton type=\"button\" onClick={onToggleFeedClick}>\n        Toggle Feed\n      </ToggleFeedButton>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst SpreadText = styled.p`\n  color: gray;\n  margin-right: auto;\n  margin-left: auto;\n  margin: 5px auto;\n`;\n\nconst spreadFormatter = new Intl.NumberFormat(\"en-IN\", {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nconst percentageFormatter = new Intl.NumberFormat(\"en-IN\", {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\ninterface Props {\n  spreadPoints: number;\n  spreadPercentage: number;\n}\n\nexport const Spread = ({ spreadPoints, spreadPercentage }: Props) => {\n  return (\n    <SpreadText>\n      Spread: {spreadFormatter.format(spreadPoints)} (\n      {percentageFormatter.format(spreadPercentage)}%)\n    </SpreadText>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { Breakpoints } from \"../theme\";\nimport { FeedStatus } from \"../types\";\nimport { useIsTabletAndAbove } from \"../useIsTabletAndAbove\";\nimport { Spread } from \"./Spread\";\n\nconst TopHeader = styled.div`\n  display: grid;\n  align-items: center;\n  grid-template-columns: 1fr 1fr;\n  border-bottom: 2px solid white;\n  color: white;\n  padding: 6px 10px;\n  @media (min-width: ${Breakpoints.Tablet}px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n`;\n\nconst StatusText = styled.p`\n  text-align: right;\n`;\n\nconst RestartButton = styled.button`\n  border: none;\n  background-color: blue;\n  text-transform: uppercase;\n  color: white;\n  margin-top: 2px;\n  padding: 2px 4px;\n  cursor: pointer;\n  letter-spacing: 2px;\n  font-size: 0.7rem;\n`;\n\ninterface Props {\n  spreadPoints: number;\n  spreadPercentage: number;\n  feedStatus: FeedStatus;\n  onRestartFeedClick: () => void;\n}\n\nexport const Header = ({\n  spreadPoints,\n  spreadPercentage,\n  feedStatus,\n  onRestartFeedClick,\n}: Props) => {\n  const isTabletAndAbove = useIsTabletAndAbove();\n\n  return (\n    <TopHeader>\n      <p>Order Book</p>\n      {isTabletAndAbove ? (\n        <Spread\n          spreadPoints={spreadPoints}\n          spreadPercentage={spreadPercentage}\n        />\n      ) : null}\n      <StatusText>\n        Status: {feedStatus} {feedStatus === \"error\" ? \"🔴\" : null}\n        <br />\n        {feedStatus === \"stopped\" ? (\n          <RestartButton onClick={onRestartFeedClick}>restart</RestartButton>\n        ) : null}\n        {feedStatus === \"error\" ? (\n          <RestartButton onClick={onRestartFeedClick}>retry</RestartButton>\n        ) : null}\n      </StatusText>\n    </TopHeader>\n  );\n};\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  DeltaMessage,\n  InitialSnapshotMessage,\n  PriceLevel,\n  PriceLevelData,\n} from \"../types\";\n\nconst getPriceLevelsList = (\n  priceLevels: Record<number, PriceLevelData>,\n  direction: \"asc\" | \"desc\",\n  listLength: number\n): PriceLevelData[] =>\n  Object.entries(priceLevels)\n    .sort((a, b) => {\n      const valueOfA = Number(a[0]);\n      const valueOfB = Number(b[0]);\n      return direction === \"asc\" ? valueOfA - valueOfB : valueOfB - valueOfA;\n    })\n    .slice(0, listLength)\n    .map(([, value]) => value);\n\nconst calculateTotals = (priceList: PriceLevelData[]): PriceLevelData[] => {\n  let total = 0;\n  return priceList.map(({ price, size }) => {\n    total += size;\n    return { price, size, total };\n  });\n};\n\nconst createPriceLevelsMap = (priceLevels: PriceLevel[]) =>\n  priceLevels.reduce<Record<number, PriceLevelData>>(\n    (acc, next) => ({\n      ...acc,\n      [next[0]]: {\n        price: next[0],\n        size: next[1],\n        total: 0, // total will be calucalated separately later\n      },\n    }),\n    {}\n  );\n\nconst updatePriceLevel = (\n  currentState: Record<number, PriceLevelData>,\n  priceLevels: PriceLevel[]\n) => {\n  const stateCopy = { ...currentState };\n  priceLevels.forEach(([price, size]) => {\n    if (size === 0) {\n      delete stateCopy[price];\n    } else {\n      stateCopy[price] = {\n        price,\n        size,\n        total: 0,\n      };\n    }\n  });\n  return stateCopy;\n};\n\nexport const usePriceLevelsList = (\n  initialSnapshot: InitialSnapshotMessage,\n  listLength: number\n) => {\n  const [asks, setAsks] = useState(() =>\n    createPriceLevelsMap(initialSnapshot.asks)\n  );\n  const [bids, setBids] = useState(() =>\n    createPriceLevelsMap(initialSnapshot.bids)\n  );\n\n  const bidsWithTotals = useMemo(\n    () => calculateTotals(getPriceLevelsList(bids, \"desc\", listLength)),\n    [bids, listLength]\n  );\n\n  const asksWithTotals = useMemo(\n    () => calculateTotals(getPriceLevelsList(asks, \"asc\", listLength)),\n    [asks, listLength]\n  );\n\n  const updatePriceLevels = useCallback((deltas: DeltaMessage[]) => {\n    deltas.forEach((delta) => {\n      setAsks((state) => updatePriceLevel(state, delta.asks || []));\n      setBids((state) => updatePriceLevel(state, delta.bids || []));\n    });\n  }, []);\n\n  useEffect(() => {\n    setAsks(createPriceLevelsMap(initialSnapshot.asks));\n    setBids(createPriceLevelsMap(initialSnapshot.bids));\n  }, [initialSnapshot]);\n\n  return {\n    asks: asksWithTotals,\n    bids: bidsWithTotals,\n    updatePriceLevels,\n  };\n};\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { Breakpoints } from \"../theme\";\nimport { DeltaMessage, FeedStatus, InitialSnapshotMessage } from \"../types\";\nimport { useIsTabletAndAbove } from \"../useIsTabletAndAbove\";\nimport { Asks } from \"./Asks\";\nimport { Bids } from \"./Bids\";\nimport { Footer } from \"./Footer\";\nimport { Header } from \"./Header\";\nimport { Spread } from \"./Spread\";\nimport { usePriceLevelsList } from \"./usePriceLevelsList\";\n\nconst OrdersContainer = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n\n  @media (min-width: ${Breakpoints.Tablet}px) {\n    flex-wrap: nowrap;\n    flex-direction: row-reverse;\n  }\n`;\n\nconst OrdersListWrapper = styled.div`\n  width: 100%;\n\n  @media (min-width: ${Breakpoints.Tablet}px) {\n    width: 50%;\n  }\n`;\n\ninterface Props {\n  initialSnapshot: InitialSnapshotMessage;\n  deltas: DeltaMessage[];\n  onToggleFeedClick: () => void;\n  feedStatus: FeedStatus;\n  onRestartFeedClick: () => void;\n}\n\nexport const Orderbook = ({\n  initialSnapshot,\n  deltas,\n  onToggleFeedClick,\n  feedStatus,\n  onRestartFeedClick,\n}: Props) => {\n  const isTabletAndAbove = useIsTabletAndAbove();\n  const { asks, bids, updatePriceLevels } = usePriceLevelsList(\n    initialSnapshot,\n    isTabletAndAbove ? 25 : 10\n  );\n\n  useEffect(() => {\n    updatePriceLevels(deltas);\n  }, [deltas, updatePriceLevels]);\n\n  const [topBid] = bids;\n  const [topAsk] = asks;\n  const bottomBid = bids[bids.length - 1];\n  const bottomAsk = asks[asks.length - 1];\n  const highestTotal =\n    bottomBid.total > bottomAsk.total ? bottomBid.total : bottomAsk.total;\n  const spreadPoints = topAsk.price - topBid.price;\n  const spreadPercentage = (spreadPoints / topBid.price) * 100;\n\n  return (\n    <>\n      <Header\n        spreadPoints={spreadPoints}\n        spreadPercentage={spreadPercentage}\n        feedStatus={feedStatus}\n        onRestartFeedClick={onRestartFeedClick}\n      />\n      <OrdersContainer>\n        <OrdersListWrapper>\n          <Asks asks={asks} highestTotal={highestTotal} />\n        </OrdersListWrapper>\n        {!isTabletAndAbove ? (\n          <Spread\n            spreadPoints={spreadPoints}\n            spreadPercentage={spreadPercentage}\n          />\n        ) : null}\n        <OrdersListWrapper>\n          <Bids bids={bids} highestTotal={highestTotal} />\n        </OrdersListWrapper>\n      </OrdersContainer>\n      <Footer onToggleFeedClick={onToggleFeedClick} />\n    </>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\nimport { useEvent, useNetworkState } from \"react-use\";\nimport styled from \"styled-components/macro\";\nimport { DataSource } from \"./DataSource\";\nimport { Orderbook } from \"./Orderbook/Orderbook\";\nimport {\n  DeltaMessage,\n  FeedStatus,\n  InitialSnapshotMessage,\n  ProductId,\n} from \"./types\";\n\nconst MainContainer = styled.main`\n  background-color: black;\n  font-family: \"Courier New\", sans-serif;\n`;\n\nfunction App() {\n  const networkState = useNetworkState();\n  const [feedStatus, setFeedStatus] = useState<FeedStatus>(\"feeding\");\n  const [productId, setProductId] = useState(ProductId.PI_XBTUSD);\n  const [initialSnapshot, setInitialSnapshot] =\n    useState<InitialSnapshotMessage>();\n  const [deltas, setDeltas] = useState<DeltaMessage[]>([]);\n\n  useEvent(\"blur\", () => {\n    setFeedStatus(\"stopped\");\n  });\n\n  const handleToggleFeed = useCallback(() => {\n    if (productId === ProductId.PI_ETHUSD) {\n      setProductId(ProductId.PI_XBTUSD);\n    } else {\n      setProductId(ProductId.PI_ETHUSD);\n    }\n  }, [productId]);\n\n  const handleRestartFeed = useCallback(() => {\n    setFeedStatus(\"feeding\");\n  }, []);\n\n  const handleFeedError = useCallback(() => {\n    setFeedStatus(\"error\");\n  }, [setFeedStatus]);\n\n  if (networkState.online === false) {\n    return <>you need to have internet connection to see the orderbook</>;\n  }\n\n  return (\n    <MainContainer>\n      {feedStatus === \"feeding\" ? (\n        <DataSource\n          productId={productId}\n          setInitialSnapshot={setInitialSnapshot}\n          setDeltaMessages={setDeltas}\n          onError={handleFeedError}\n        />\n      ) : null}\n      {feedStatus === \"error\" ? (\n        <p>\n          We experienced an error loading the orderbook data.\n          <button onClick={handleRestartFeed}>click here to retry</button>\n        </p>\n      ) : null}\n      {initialSnapshot ? (\n        <Orderbook\n          initialSnapshot={initialSnapshot}\n          deltas={deltas}\n          onToggleFeedClick={handleToggleFeed}\n          feedStatus={feedStatus}\n          onRestartFeedClick={handleRestartFeed}\n        />\n      ) : (\n        <p>pretty placeholder</p>\n      )}\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}